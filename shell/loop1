#!/bin/bash
#this is proper way for shell scripting header

LOG_DIR = /var/log
ROOT_UID = 0
#variables are better than hardcoded values 
cd $LOG_DIR

#try if loop with comparing UID is not equal to root_uid
#if [ uid != root_uid ]  this also acceptable 
if [ "$UID" -ne "$ROOT_UID" ]
then
  echo "Must be root to perform this operation."
fi

#try if loop if present (non-empty)
if [ -n "$1" ]
then 
   lines = $1
else
   lines = $LINES
fi

#try for loop 

for number in  {1..99..2}
do 		
  echo $number
done

#reading inputs from command line
read name  //reads the first command line argument
echo "Welcome $name"

cat /dev/null > messagess

# null command " : " (no op) ( like builtin true in shell) 
# endless loop
while :
do
	echo $pwd
done

if condition
then :  # do nothing andf branch ahead
else
     echo $PWD
fi

# Brace expansion 
cat {file1,file2,file3}  > combined_file
# concatenates the three files and makes one combined file 

cp file32.{.bkp,.txt} 
# copy the file32.bkp to file32.txt


#extended brace expansion 

echo {a..z} # prints a b c d e f g h i j k l m n o p q r s t ...

echo {1..99..2} # prints all odds like 1 3 5 7 9 .....

#array intialisation 

array  = { element1 element2 element3 }


#I/O redirection , code block enclosed in braces may have io redirection

FILE=/etc/fstab
{
read line1
read line2 
} < $FILE

# chapter 4  variable substitution 

variable = 23
echo $variable

# positional parameters

echo "$0 is the name of the script"
echo "$1 is the first argument passed to the script"
.
.
echo " $10 is the 10th argument passed to script"

echo " $# is the number of arguments passed "
echo "All the command-line parameters are: "$*""
echo " $? last command exit status"

# chapeter 7 Test constructs 

if [ -z "$1" ] # check if $1 is zero 
then
   echo "No command-line parameters passed"
else
   echo "$1 is passed"
fi

if [ -e /var/log/messages ] # checks if file exists 

#arithmetic evaluation

decimal = 15
octal = 017

if [ "$decimal" -eq "$octal" ]
then
echo "$decimal equals $octal"
else
echo "$decimal is not equal to $octal" # 15 is not equal to 017
fi # Doesn't evaluate within [ single brackets ]!

if [[ "$decimal" -eq "$octal" ]]
then
echo "$decimal equals $octal" # 15 equals 017
else
echo "$decimal is not equal to $octal"
fi # Evaluates within [[ double brackets ]]!

if [ "$var1" -ne "$var2" ]
then 
    echo "$var1 is not equal to $var1"
fi




echo "Logs cleaned up."

exit #the right proper method to exiting a script 
